// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole{
  ADMIN
  USER
}

model User {
 id           String @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  image         String? @unique
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled  Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  // member SpaceMembers?
  // admin  SpaceAdmins?
  space Space[]

  
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Space{
  id String @id @default(cuid())
  name String @unique
  description  String?
  tag String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  documents Document[]

  // members SpaceMembers[]
  // admins  SpaceAdmins[]
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

}

// model SpaceMembers {
//   id String @id @default(cuid())
//   userId  String
//   spaceId String

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

//   @@unique([userId])

// }

// model SpaceAdmins {
//   id String @id @default(cuid())
//   userId  String
//   spaceId String

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

//   @@unique([userId])
// }

model Document{
  id Int @id @default(autoincrement())
  name String
  type String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  spaceId String
  space Space @relation(fields: [spaceId], references: [id])
}
